{
  "name": "InnerFeeContract",
  "structs": {},
  "methods": [
    {
      "name": "burn_ops",
      "args": [
        {
          "type": "uint64",
          "name": "op_budget"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "events": [],
      "recommendations": {}
    },
    {
      "name": "burn_ops_readonly",
      "args": [
        {
          "type": "uint64",
          "name": "op_budget"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": true,
      "events": [],
      "recommendations": {}
    },
    {
      "name": "no_op",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "events": [],
      "recommendations": {}
    },
    {
      "name": "send_x_inners_with_fees",
      "args": [
        {
          "type": "uint64",
          "name": "app_id"
        },
        {
          "type": "uint64[]",
          "name": "fees"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "events": [],
      "recommendations": {}
    },
    {
      "name": "send_inners_with_fees",
      "args": [
        {
          "type": "uint64",
          "name": "app_id_1"
        },
        {
          "type": "uint64",
          "name": "app_id_2"
        },
        {
          "type": "(uint64,uint64,uint64,uint64,uint64[])",
          "name": "fees"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "events": [],
      "recommendations": {}
    },
    {
      "name": "send_inners_with_fees_2",
      "args": [
        {
          "type": "uint64",
          "name": "app_id_1"
        },
        {
          "type": "uint64",
          "name": "app_id_2"
        },
        {
          "type": "(uint64,uint64,uint64[],uint64,uint64,uint64[])",
          "name": "fees"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "events": [],
      "recommendations": {}
    }
  ],
  "arcs": [
    22,
    28
  ],
  "networks": {},
  "state": {
    "schema": {
      "global": {
        "ints": 0,
        "bytes": 0
      },
      "local": {
        "ints": 0,
        "bytes": 0
      }
    },
    "keys": {
      "global": {},
      "local": {},
      "box": {}
    },
    "maps": {
      "global": {},
      "local": {},
      "box": {}
    }
  },
  "bareActions": {
    "create": [
      "NoOp"
    ],
    "call": []
  },
  "sourceInfo": {
    "approval": {
      "sourceInfo": [
        {
          "pc": [
            83,
            99,
            115,
            124,
            143,
            166
          ],
          "errorMessage": "OnCompletion is not NoOp"
        },
        {
          "pc": [
            194
          ],
          "errorMessage": "can only call when creating"
        },
        {
          "pc": [
            86,
            102,
            118,
            127,
            146,
            169
          ],
          "errorMessage": "can only call when not creating"
        }
      ],
      "pcOffsetMethod": "none"
    },
    "clear": {
      "sourceInfo": [],
      "pcOffsetMethod": "none"
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudGVzdF9jb250cmFjdC5jb250cmFjdC5Jbm5lckZlZUNvbnRyYWN0LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
  },
  "events": [],
  "templateVariables": {}
}