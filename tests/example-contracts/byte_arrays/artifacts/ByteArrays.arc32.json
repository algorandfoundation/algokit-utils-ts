{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
        "opt_in": "CREATE"
      }
    },
    "setBoxValues()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "dynamicByteArray()byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "staticByteArray()byte[4]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "nestedByteArrays()(byte[],byte[4])": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "byteArraysInStruct()(byte[],byte[4],(byte[],uint64))": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "dynamicByteArrayLocal": {
          "type": "bytes",
          "key": "dynamicByteArrayLocal"
        },
        "staticByteArrayLocal": {
          "type": "bytes",
          "key": "staticByteArrayLocal"
        },
        "nestedByteArraysLocal": {
          "type": "bytes",
          "key": "nestedByteArraysLocal"
        },
        "byteArraysInStructLocal": {
          "type": "bytes",
          "key": "byteArraysInStructLocal"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "dynamicByteArrayGlobal": {
          "type": "bytes",
          "key": "dynamicByteArrayGlobal"
        },
        "staticByteArrayGlobal": {
          "type": "bytes",
          "key": "staticByteArrayGlobal"
        },
        "nestedByteArraysGlobal": {
          "type": "bytes",
          "key": "nestedByteArraysGlobal"
        },
        "byteArraysInStructGlobal": {
          "type": "bytes",
          "key": "byteArraysInStructGlobal"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 8,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 8,
      "num_uints": 4
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ByteArrays",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setBoxValues",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "dynamicByteArray",
        "args": [],
        "returns": {
          "type": "byte[]"
        }
      },
      {
        "name": "staticByteArray",
        "args": [],
        "returns": {
          "type": "byte[4]"
        }
      },
      {
        "name": "nestedByteArrays",
        "args": [],
        "returns": {
          "type": "(byte[],byte[4])"
        }
      },
      {
        "name": "byteArraysInStruct",
        "args": [],
        "returns": {
          "type": "(byte[],byte[4],(byte[],uint64))"
        }
      }
    ]
  }
}